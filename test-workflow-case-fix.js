/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: transitions.case = event_name –¥–ª—è screen —Å–æ—Å—Ç–æ—è–Ω–∏–π
 */

import { mapGraphDataToWorkflow } from './src/utils/workflowMapper.js';

console.log('üß™ [Test] Starting workflow mapper case fix tests...\n');

// –¢–µ—Å—Ç 1: Screen State —Å –æ–¥–Ω–∏–º —Å–æ–±—ã—Ç–∏–µ–º
console.log('üìù Test 1: Screen State —Å —Å–æ–±—ã—Ç–∏–µ–º "checkout"');
const test1Data = {
  nodes: [
    {
      id: 'screen-cart',
      type: 'screen',
      data: { label: '–ö–æ—Ä–∑–∏–Ω–∞', screenId: 'cart' }
    },
    {
      id: 'screen-checkout',
      type: 'screen',
      data: { label: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞', screenId: 'checkout' }
    }
  ],
  edges: [
    {
      source: 'screen-cart',
      target: 'screen-checkout',
      data: { event: 'checkout' }
    }
  ],
  screens: {
    cart: { id: 'cart', name: '–ö–æ—Ä–∑–∏–Ω–∞', sections: {} },
    checkout: { id: 'checkout', name: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ', sections: {} }
  }
};

const result1 = mapGraphDataToWorkflow(test1Data);
const cartState = result1.states.find(s => s.name === '–ö–æ—Ä–∑–∏–Ω–∞');

console.log('Cart state transitions:', JSON.stringify(cartState.transitions, null, 2));
console.assert(
  cartState.transitions[0].case === 'checkout',
  '‚ùå FAIL: case –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "checkout"'
);
console.log('‚úÖ PASS: case = "checkout"\n');

// –¢–µ—Å—Ç 2: Screen State —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏
console.log('üìù Test 2: Screen State —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏');
const test2Data = {
  nodes: [
    {
      id: 'screen-product',
      type: 'screen',
      data: { label: '–¢–æ–≤–∞—Ä', screenId: 'product' }
    },
    {
      id: 'screen-cart',
      type: 'screen',
      data: { label: '–ö–æ—Ä–∑–∏–Ω–∞', screenId: 'cart' }
    },
    {
      id: 'screen-favorites',
      type: 'screen',
      data: { label: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', screenId: 'favorites' }
    }
  ],
  edges: [
    {
      source: 'screen-product',
      target: 'screen-cart',
      data: { event: 'add_to_cart' }
    },
    {
      source: 'screen-product',
      target: 'screen-favorites',
      data: { event: 'add_to_favorites' }
    }
  ],
  screens: {
    product: { id: 'product', name: '–¢–æ–≤–∞—Ä', sections: {} },
    cart: { id: 'cart', name: '–ö–æ—Ä–∑–∏–Ω–∞', sections: {} },
    favorites: { id: 'favorites', name: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ', sections: {} }
  }
};

const result2 = mapGraphDataToWorkflow(test2Data);
const productState = result2.states.find(s => s.name === '–¢–æ–≤–∞—Ä');

console.log('Product state transitions:', JSON.stringify(productState.transitions, null, 2));
console.assert(
  productState.transitions.length === 2,
  '‚ùå FAIL: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –ø–µ—Ä–µ—Ö–æ–¥–∞'
);
console.assert(
  productState.transitions[0].case === 'add_to_cart',
  '‚ùå FAIL: –ü–µ—Ä–≤—ã–π case –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "add_to_cart"'
);
console.assert(
  productState.transitions[1].case === 'add_to_favorites',
  '‚ùå FAIL: –í—Ç–æ—Ä–æ–π case –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "add_to_favorites"'
);
console.log('‚úÖ PASS: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');

// –¢–µ—Å—Ç 3: Technical State —Å —É—Å–ª–æ–≤–∏–µ–º (–Ω–µ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å event)
console.log('üìù Test 3: Technical State —Å —É—Å–ª–æ–≤–∏–µ–º');
const test3Data = {
  nodes: [
    {
      id: 'tech-check',
      type: 'action',
      data: {
        label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã',
        actionType: 'condition',
        config: {
          condition: 'cart.items.length > 0',
          resultVariable: 'isCartEmpty'
        }
      }
    },
    {
      id: 'screen-empty',
      type: 'screen',
      data: { label: '–ü—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞', screenId: 'empty' }
    },
    {
      id: 'screen-full',
      type: 'screen',
      data: { label: '–ü–æ–ª–Ω–∞—è –∫–æ—Ä–∑–∏–Ω–∞', screenId: 'full' }
    }
  ],
  edges: [
    {
      source: 'tech-check',
      target: 'screen-full',
      data: { condition: 'cart.items.length > 0', variable: 'isCartEmpty' }
    },
    {
      source: 'tech-check',
      target: 'screen-empty',
      data: { condition: null } // default case
    }
  ],
  screens: {
    empty: { id: 'empty', name: '–ü—É—Å—Ç–∞—è', sections: {} },
    full: { id: 'full', name: '–ü–æ–ª–Ω–∞—è', sections: {} }
  }
};

const result3 = mapGraphDataToWorkflow(test3Data);
const techState = result3.states.find(s => s.name === '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã');

console.log('Technical state transitions:', JSON.stringify(techState.transitions, null, 2));
console.assert(
  techState.transitions[0].case === 'cart.items.length > 0',
  '‚ùå FAIL: case –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ–º'
);
console.assert(
  techState.transitions[0].variable === 'isCartEmpty',
  '‚ùå FAIL: variable –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
);
console.log('‚úÖ PASS: Technical state –∏—Å–ø–æ–ª—å–∑—É–µ—Ç condition, –Ω–µ event\n');

// –¢–µ—Å—Ç 4: Integration State (case=null + variable)
console.log('üìù Test 4: Integration State');
const test4Data = {
  nodes: [
    {
      id: 'integration-api',
      type: 'action',
      data: {
        label: 'API: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
        actionType: 'api-call',
        config: {
          url: '/api/data',
          method: 'GET',
          resultVariable: 'cart_updated'
        }
      }
    },
    {
      id: 'screen-result',
      type: 'screen',
      data: { label: '–†–µ–∑—É–ª—å—Ç–∞—Ç', screenId: 'result' }
    }
  ],
  edges: [
    {
      source: 'integration-api',
      target: 'screen-result',
      data: { variable: 'cart_updated' }
    }
  ],
  screens: {
    result: { id: 'result', name: '–†–µ–∑—É–ª—å—Ç–∞—Ç', sections: {} }
  }
};

const result4 = mapGraphDataToWorkflow(test4Data);
const integrationState = result4.states.find(s => s.name === 'API: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö');

console.log('Integration state transitions:', JSON.stringify(integrationState.transitions, null, 2));
console.log('Integration state expressions:', JSON.stringify(integrationState.expressions, null, 2));
console.assert(
  integrationState.transitions[0].case === null,
  '‚ùå FAIL: Integration state –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å case=null'
);
console.assert(
  integrationState.transitions[0].variable === 'cart_updated',
  '‚ùå FAIL: Integration state –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å variable'
);
console.assert(
  integrationState.expressions[0].variable === 'cart_updated',
  '‚ùå FAIL: Integration expression –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å variable'
);
console.log('‚úÖ PASS: Integration state –∏–º–µ–µ—Ç case=null –∏ variable\n');

// –¢–µ—Å—Ç 5: Technical State –ø–æ—Å–ª–µ Integration (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ)
console.log('üìù Test 5: Technical State –ø–æ—Å–ª–µ Integration (—Å variable)');
const test5Data = {
  nodes: [
    {
      id: 'integration-update-cart',
      type: 'action',
      data: {
        label: 'UpdateCart',
        actionType: 'api-call',
        config: {
          url: 'http://localhost:8080',
          method: 'get',
          resultVariable: 'cart_updated'
        }
      }
    },
    {
      id: 'tech-check-result',
      type: 'action',
      data: {
        label: 'CheckCartUpdate',
        actionType: 'condition',
        config: {
          resultVariable: 'cart_updated',
          condition: 'cart_updated is True'
        }
      }
    },
    {
      id: 'screen-success',
      type: 'screen',
      data: { label: 'InitCart', screenId: 'init' }
    },
    {
      id: 'screen-failure',
      type: 'screen',
      data: { label: 'CartReviewScreen', screenId: 'review' }
    }
  ],
  edges: [
    {
      source: 'integration-update-cart',
      target: 'tech-check-result',
      data: { variable: 'cart_updated' }
    },
    {
      source: 'tech-check-result',
      target: 'screen-success',
      data: { variable: 'cart_updated', condition: 'True' }
    },
    {
      source: 'tech-check-result',
      target: 'screen-failure',
      data: { variable: 'cart_updated', condition: 'False' }
    }
  ],
  screens: {
    init: { id: 'init', name: 'Init', sections: {} },
    review: { id: 'review', name: 'Review', sections: {} }
  }
};

const result5 = mapGraphDataToWorkflow(test5Data);
const integrationState5 = result5.states.find(s => s.name === 'UpdateCart');
const technicalState5 = result5.states.find(s => s.name === 'CheckCartUpdate');

console.log('Integration transitions:', JSON.stringify(integrationState5.transitions, null, 2));
console.log('Technical transitions:', JSON.stringify(technicalState5.transitions, null, 2));

// Integration –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å: variable, case=null, state_id
console.assert(
  integrationState5.transitions[0].variable === 'cart_updated',
  '‚ùå FAIL: Integration –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å variable'
);
console.assert(
  integrationState5.transitions[0].case === null,
  '‚ùå FAIL: Integration –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å case=null'
);
console.assert(
  integrationState5.transitions[0].state_id === 'CheckCartUpdate',
  '‚ùå FAIL: Integration –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ CheckCartUpdate'
);

// Technical –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å: variable, case (condition), state_id
console.assert(
  technicalState5.transitions[0].variable === 'cart_updated',
  '‚ùå FAIL: Technical transition 1 –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å variable'
);
console.assert(
  technicalState5.transitions[0].case === 'True',
  '‚ùå FAIL: Technical transition 1 –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å case="True"'
);
console.assert(
  technicalState5.transitions[1].variable === 'cart_updated',
  '‚ùå FAIL: Technical transition 2 –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å variable'
);
console.assert(
  technicalState5.transitions[1].case === 'False',
  '‚ùå FAIL: Technical transition 2 –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å case="False"'
);

console.log('‚úÖ PASS: Integration ‚Üí Technical flow —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n');

console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
