/**
 * Workflow API Client
 * 
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º Workflow API
 * –í–∫–ª—é—á–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ integration-guide.md
 */

import '../types/workflowContract.js';
import { getBaseUrl } from '../config/api';

/**
 * Workflow API Client Class
 */
export class WorkflowAPI {
  /**
   * @param {string} baseUrl - –ë–∞–∑–æ–≤—ã–π URL —Å–µ—Ä–≤–µ—Ä–∞
   */
  constructor(baseUrl = getBaseUrl()) {
    this.baseUrl = baseUrl;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å workflow –Ω–∞ —Å–µ—Ä–≤–µ—Ä
   * @param {StateModel[]} states - –ú–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
   * @param {Object} context - –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
   * @returns {Promise<SaveWorkflowResponse>}
   */
  async saveWorkflow(states, context = {}) {
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      this.validateWorkflow(states);
    } catch (validationError) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –±—Ä–æ—Å–∏–ª–∞ –æ—à–∏–±–∫—É - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      console.error('‚ùå Workflow validation failed:', validationError);
      throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ workflow: ${validationError.message}`);
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
    const normalizedStates = states.map(state => this.normalizeState(state));

    // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    /** @type {SaveWorkflowRequest} */
    const requestBody = {
      states: {
        states: normalizedStates  // –û–±–µ—Ä—Ç–∫–∞ –≤ –æ–±—ä–µ–∫—Ç
      },
      predefined_context: context
    };

    console.log('üì§ Sending workflow to server:', {
      url: `${this.baseUrl}/workflow/save`,
      statesCount: normalizedStates.length,
      requestBody
    });

    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ screen –ø–æ–ª–µ–π
    console.log('üîç Screen fields in states:');
    normalizedStates.forEach((state, index) => {
      const hasScreen = state.screen && Object.keys(state.screen).length > 0;
      console.log(`  [${index}] ${state.name} (${state.state_type}): screen=${hasScreen ? 'YES' : 'NO'}`, 
        hasScreen ? `(${Object.keys(state.screen).join(', ')})` : ''
      );
    });

    try {
      const response = await fetch(`${this.baseUrl}/workflow/save`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      console.log('üì• Server response status:', response.status, response.statusText);

      if (!response.ok) {
        const error = await response.json().catch(() => ({ 
          detail: `HTTP ${response.status}: ${response.statusText}` 
        }));
        console.error('‚ùå Server returned error:', error);
        throw new Error(error.detail || `Failed to save workflow (${response.status})`);
      }

      const result = await response.json();
      console.log('‚úÖ Workflow saved successfully:', result);
      return result;
    } catch (error) {
      // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
      if (error instanceof TypeError && error.message.includes('Failed to fetch')) {
        console.error('‚ùå Network error - server unreachable');
        throw new Error(
          `‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n\n` +
          `URL: ${this.baseUrl}\n\n` +
          `–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n` +
          `1. –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:\n` +
          `   cd server && uvicorn main:app --reload --port 8000\n\n` +
          `2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n` +
          `3. CORS –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å - –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n\n` +
          `üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ: SERVER_NOT_RUNNING.md`
        );
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à–∞ –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      if (error.message && (error.message.includes('HTTP') || error.message.includes('—É–¥–∞–ª–æ—Å—å'))) {
        throw error;
      }
      
      // –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ª–æ–≥–∏—Ä—É–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
      console.error('‚ùå Unexpected error in saveWorkflow:', error);
      const errorMessage = error?.message || String(error);
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ workflow: ${errorMessage}`);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è workflow –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
   * @param {StateModel[]} states - –ú–∞—Å—Å–∏–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
   * @throws {Error} –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
   */
  validateWorkflow(states) {
    if (!Array.isArray(states) || states.length === 0) {
      throw new Error('States array must not be empty');
    }

    // 1. –†–æ–≤–Ω–æ 1 initial_state
    const initialCount = states.filter(s => s.initial_state).length;
    if (initialCount !== 1) {
      throw new Error(`Expected exactly 1 initial state, got ${initialCount}`);
    }

    // 2. –ú–∏–Ω–∏–º—É–º 1 final_state
    const finalCount = states.filter(s => s.final_state).length;
    if (finalCount < 1) {
      throw new Error(`Expected at least 1 final state, got ${finalCount}`);
    }

    // 3. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
    const names = states.map(s => s.name);
    const uniqueNames = new Set(names);
    if (uniqueNames.size !== names.length) {
      const duplicates = names.filter((name, index) => names.indexOf(name) !== index);
      throw new Error(`State names must be unique. Duplicates: ${duplicates.join(', ')}`);
    }

    // 4. Integration State –ø—Ä–∞–≤–∏–ª–∞
    states.forEach(state => {
      if (state.state_type === 'integration') {
        if (state.transitions.length !== 1) {
          throw new Error(
            `Integration state "${state.name}" must have exactly 1 transition, got ${state.transitions.length}`
          );
        }
        if (state.transitions[0]?.case !== null) {
          throw new Error(
            `Integration state "${state.name}" transition must have case=null`
          );
        }
      }
    });

    // 5. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ state_id
    const stateNames = new Set(names);
    states.forEach(state => {
      state.transitions.forEach(t => {
        if (!stateNames.has(t.state_id)) {
          throw new Error(
            `State "${state.name}" has transition to non-existent state "${t.state_id}"`
          );
        }
      });
    });

    // 6. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    states.forEach(state => {
      if (!state.state_type) {
        throw new Error(`State "${state.name}" missing state_type`);
      }
      if (!state.name) {
        throw new Error('State missing name field');
      }
      if (typeof state.initial_state !== 'boolean') {
        throw new Error(`State "${state.name}" initial_state must be boolean`);
      }
      if (typeof state.final_state !== 'boolean') {
        throw new Error(`State "${state.name}" final_state must be boolean`);
      }
      if (!Array.isArray(state.expressions)) {
        throw new Error(`State "${state.name}" expressions must be an array`);
      }
      if (!Array.isArray(state.transitions)) {
        throw new Error(`State "${state.name}" transitions must be an array`);
      }
    });
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
   * @param {Partial<StateModel>} state - –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   * @returns {StateModel} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  normalizeState(state) {
    const normalized = {
      state_type: state.state_type || 'screen',
      name: state.name || state.state_name || '',
      screen: state.screen || {},                   // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ screen
      initial_state: Boolean(state.initial_state),  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ boolean
      final_state: Boolean(state.final_state),      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ boolean
      expressions: state.expressions || [],         // –î–µ—Ñ–æ–ª—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      transitions: state.transitions || [],         // –î–µ—Ñ–æ–ª—Ç –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    };

    // –§–∏–∫—Å –¥–ª—è Integration State
    if (normalized.state_type === 'integration' && normalized.transitions.length > 0) {
      normalized.transitions = [
        {
          state_id: normalized.transitions[0].state_id,
          case: null,  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ null
          variable: normalized.transitions[0].variable
        }
      ];
    }

    return normalized;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å Technical Expression
   * @param {string} variable - –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
   * @param {string[]} deps - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
   * @param {string} expr - –í—ã—Ä–∞–∂–µ–Ω–∏–µ
   * @returns {TechnicalExpression}
   */
  createTechnicalExpression(variable, deps, expr) {
    return { 
      variable, 
      dependent_variables: deps, 
      expression: expr 
    };
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å Integration Expression
   * @param {string} variable - –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
   * @param {string} url - URL
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @param {HttpMethod} method - HTTP –º–µ—Ç–æ–¥
   * @returns {IntegrationExpression}
   */
  createIntegrationExpression(variable, url, params, method = 'get') {
    return { 
      variable, 
      url, 
      params, 
      method: method.toLowerCase() 
    };
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å Event Expression
   * @param {string} eventName - –ò–º—è —Å–æ–±—ã—Ç–∏—è
   * @returns {EventExpression}
   */
  createEventExpression(eventName) {
    return { 
      event_name: eventName 
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
   * @returns {Promise<boolean>}
   */
  async healthCheck() {
    try {
      const response = await fetch(`${this.baseUrl}/healthcheck`, {
        method: 'GET',
      });
      return response.ok;
    } catch (error) {
      console.error('Health check failed:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º workflow
   * @param {string} wfDescriptionId - ID –æ–ø–∏—Å–∞–Ω–∏—è workflow
   * @returns {Promise<Object>}
   */
  async getWorkflow(wfDescriptionId) {
    const response = await fetch(
      `${this.baseUrl}/workflow/${wfDescriptionId}`,
      {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
        },
      }
    );

    if (!response.ok) {
      throw new Error('Failed to fetch workflow');
    }

    return response.json();
  }
}

/**
 * Singleton instance (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
let workflowApiInstance = null;

/**
 * –ü–æ–ª—É—á–∏—Ç—å singleton instance WorkflowAPI
 * @param {string} [baseUrl] - –ë–∞–∑–æ–≤—ã–π URL (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ)
 * @returns {WorkflowAPI}
 */
export function getWorkflowAPI(baseUrl) {
  if (!workflowApiInstance) {
    workflowApiInstance = new WorkflowAPI(baseUrl);
  }
  return workflowApiInstance;
}

export default WorkflowAPI;
