/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è workflow –∏ —Ä–∞–±–æ—Ç—ã –∫—ç—à–∞
 * 
 * –ó–∞–ø—É—Å–∫: node test-workflow-unification.js
 */

// –ò–º–∏—Ç–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
const workflowDataCache = new Map();
const startingWorkflows = new Map();
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

// –°—á—ë—Ç—á–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤
let apiRequestCount = 0;

// –ò–º–∏—Ç–∞—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞
async function mockApiRequest(workflowId, initialContext) {
  apiRequestCount++;
  console.log(`üì° [Mock API] Request #${apiRequestCount} to /client/workflow`);
  
  // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
  await new Promise(resolve => setTimeout(resolve, 100));
  
  return {
    session_id: 'test-session-123',
    current_state: 'start',
    state_type: 'screen',
    context: initialContext,
    screen: { id: 'screen-1', title: 'Test Screen' }
  };
}

// –§—É–Ω–∫—Ü–∏—è startClientWorkflow —Å –∫—ç—à–µ–º
async function startClientWorkflow(workflowId, initialContext = {}, useCache = true) {
  console.log(`\nüöÄ [startClientWorkflow] Called with:`, { workflowId, useCache });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (useCache) {
    const cached = workflowDataCache.get(workflowId);
    if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {
      console.log(`‚úÖ [Cache HIT] Using cached data for workflow: ${workflowId}`);
      return cached.data;
    } else if (cached) {
      console.log(`‚ö†Ô∏è [Cache EXPIRED] Cache expired for workflow: ${workflowId}`);
    } else {
      console.log(`‚ùå [Cache MISS] No cache for workflow: ${workflowId}`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥—ë—Ç –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
  if (startingWorkflows.has(workflowId)) {
    console.log(`‚è∏Ô∏è [Pending] Returning existing promise for workflow: ${workflowId}`);
    return startingWorkflows.get(workflowId);
  }
  
  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
  const promise = (async () => {
    try {
      const data = await mockApiRequest(workflowId, initialContext);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (useCache) {
        workflowDataCache.set(workflowId, {
          data,
          timestamp: Date.now()
        });
        console.log(`üíæ [Cache SAVED] Cached workflow: ${workflowId}`);
      }
      
      return data;
    } finally {
      startingWorkflows.delete(workflowId);
    }
  })();
  
  startingWorkflows.set(workflowId, promise);
  return promise;
}

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
async function runTests() {
  console.log('\n' + '='.repeat(60));
  console.log('–¢–ï–°–¢: –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è Workflow');
  console.log('='.repeat(60));
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø–æ–π—Ç–∏ –≤ API)
  console.log('\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ workflow');
  console.log('-'.repeat(60));
  await startClientWorkflow('workflow-1', { user: 'test' });
  console.log(`üìä Total API requests: ${apiRequestCount} (expected: 1)`);
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
  console.log('\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–æ–º—É –∂–µ workflow');
  console.log('-'.repeat(60));
  await startClientWorkflow('workflow-1', { user: 'test' });
  console.log(`üìä Total API requests: ${apiRequestCount} (expected: 1)`);
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –¥–µ–¥—É–ø–ª–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è)
  console.log('\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –Ω–æ–≤–æ–º—É workflow');
  console.log('-'.repeat(60));
  await Promise.all([
    startClientWorkflow('workflow-2', { user: 'test' }),
    startClientWorkflow('workflow-2', { user: 'test' }),
    startClientWorkflow('workflow-2', { user: 'test' })
  ]);
  console.log(`üìä Total API requests: ${apiRequestCount} (expected: 2)`);
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –†–∞–∑–Ω—ã–µ workflow ID
  console.log('\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π 4: –†–∞–∑–Ω—ã–µ workflow ID');
  console.log('-'.repeat(60));
  await Promise.all([
    startClientWorkflow('workflow-3', { user: 'test' }),
    startClientWorkflow('workflow-4', { user: 'test' })
  ]);
  console.log(`üìä Total API requests: ${apiRequestCount} (expected: 4)`);
  
  // –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ó–∞–ø—Ä–æ—Å –±–µ–∑ –∫—ç—à–∞
  console.log('\nüìã –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ó–∞–ø—Ä–æ—Å —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∫—ç—à–µ–º');
  console.log('-'.repeat(60));
  await startClientWorkflow('workflow-1', { user: 'test' }, false);
  console.log(`üìä Total API requests: ${apiRequestCount} (expected: 5)`);
  
  // –ò—Ç–æ–≥–∏
  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê');
  console.log('='.repeat(60));
  console.log(`–í—Å–µ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤: ${apiRequestCount}`);
  console.log(`–ó–∞–ø–∏—Å–µ–π –≤ –∫—ç—à–µ: ${workflowDataCache.size}`);
  console.log(`–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ 9 –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏`);
  console.log(`–≠–∫–æ–Ω–æ–º–∏—è: ${9 - apiRequestCount} –∑–∞–ø—Ä–æ—Å–æ–≤ (${Math.round((1 - apiRequestCount/9) * 100)}%)`);
  
  if (apiRequestCount === 5) {
    console.log('\n‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!');
  } else {
    console.log('\n‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù! –û–∂–∏–¥–∞–ª–æ—Å—å 5 –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ:', apiRequestCount);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);
