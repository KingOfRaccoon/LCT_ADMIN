/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Workflow Integration
 * 
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

import { mapGraphDataToWorkflow } from '../utils/workflowMapper.js';
import { WorkflowAPI } from '../services/workflowApi.js';

// ============================================
// –ü—Ä–∏–º–µ—Ä 1: –ü—Ä–æ—Å—Ç–æ–π Screen Flow
// ============================================

export async function testSimpleFlow() {
  console.log('üß™ Test 1: Simple Screen Flow');

  const graphData = {
    nodes: [
      {
        id: 'start',
        type: 'screen',
        data: {
          label: '–ù–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω',
          screenId: 'screen-start',
          start: true
        }
      },
      {
        id: 'end',
        type: 'screen',
        data: {
          label: '–ö–æ–Ω–µ—á–Ω—ã–π —ç–∫—Ä–∞–Ω',
          final: true
        }
      }
    ],
    edges: [
      {
        id: 'edge-1',
        source: 'start',
        target: 'end',
        data: {
          event: 'next',
          label: '–î–∞–ª–µ–µ'
        }
      }
    ]
  };

  const initialContext = {
    user: {
      name: 'Test User'
    }
  };

  try {
    const workflow = mapGraphDataToWorkflow(graphData, initialContext);
    console.log('‚úÖ Workflow converted:', workflow);

    const api = new WorkflowAPI('https://sandkittens.me');
    const response = await api.saveWorkflow(workflow.states, workflow.predefined_context);
    
    console.log('‚úÖ Server response:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    throw error;
  }
}

// ============================================
// –ü—Ä–∏–º–µ—Ä 2: Flow —Å API –≤—ã–∑–æ–≤–æ–º
// ============================================

export async function testApiCallFlow() {
  console.log('üß™ Test 2: API Call Integration Flow');

  const graphData = {
    nodes: [
      {
        id: 'loading',
        type: 'screen',
        data: {
          label: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
          start: true
        }
      },
      {
        id: 'api-call',
        type: 'action',
        data: {
          label: '–ó–∞–ø—Ä–æ—Å –∫ API',
          actionType: 'api-call',
          config: {
            url: 'https://jsonplaceholder.typicode.com/users/1',
            method: 'GET',
            params: {},
            resultVariable: 'userData'
          }
        }
      },
      {
        id: 'success',
        type: 'screen',
        data: {
          label: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã',
          final: true
        }
      }
    ],
    edges: [
      {
        source: 'loading',
        target: 'api-call',
        data: { event: 'load' }
      },
      {
        source: 'api-call',
        target: 'success'
      }
    ]
  };

  const initialContext = {
    userData: null
  };

  try {
    const workflow = mapGraphDataToWorkflow(graphData, initialContext);
    console.log('‚úÖ Workflow converted:', workflow);

    const api = new WorkflowAPI('https://sandkittens.me');
    const response = await api.saveWorkflow(workflow.states, workflow.predefined_context);
    
    console.log('‚úÖ Server response:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    throw error;
  }
}

// ============================================
// –ü—Ä–∏–º–µ—Ä 3: Flow —Å Technical —É–∑–ª–æ–º
// ============================================

export async function testTechnicalFlow() {
  console.log('üß™ Test 3: Technical (Calculation) Flow');

  const graphData = {
    nodes: [
      {
        id: 'cart',
        type: 'screen',
        data: {
          label: '–ö–æ—Ä–∑–∏–Ω–∞',
          start: true
        }
      },
      {
        id: 'modify-cart',
        type: 'action',
        data: {
          label: '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞',
          actionType: 'modify-cart-item',
          config: {
            itemId: '${inputs.itemId}',
            delta: '${inputs.delta}'
          }
        }
      },
      {
        id: 'updated',
        type: 'screen',
        data: {
          label: '–ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
          final: true
        }
      }
    ],
    edges: [
      {
        source: 'cart',
        target: 'modify-cart',
        data: { event: 'changeQuantity' }
      },
      {
        source: 'modify-cart',
        target: 'updated'
      }
    ]
  };

  const initialContext = {
    cart: {
      items: [
        { id: 'item-1', title: 'Product 1', quantity: 1 }
      ]
    },
    inputs: {
      itemId: 'item-1',
      delta: 1
    }
  };

  try {
    const workflow = mapGraphDataToWorkflow(graphData, initialContext);
    console.log('‚úÖ Workflow converted:', workflow);

    const api = new WorkflowAPI('https://sandkittens.me');
    const response = await api.saveWorkflow(workflow.states, workflow.predefined_context);
    
    console.log('‚úÖ Server response:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    throw error;
  }
}

// ============================================
// –ü—Ä–∏–º–µ—Ä 4: –£—Å–ª–æ–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ (Condition)
// ============================================

export async function testConditionFlow() {
  console.log('üß™ Test 4: Conditional Flow');

  const graphData = {
    nodes: [
      {
        id: 'start',
        type: 'screen',
        data: {
          label: '–í—Ö–æ–¥',
          start: true
        }
      },
      {
        id: 'check-age',
        type: 'action',
        data: {
          label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞',
          actionType: 'condition',
          config: {
            condition: 'user.age >= 18',
            dependencies: ['user.age'],
            resultVariable: 'isAdult'
          }
        }
      },
      {
        id: 'adult-screen',
        type: 'screen',
        data: {
          label: '–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω',
          final: true
        }
      },
      {
        id: 'minor-screen',
        type: 'screen',
        data: {
          label: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω',
          final: true
        }
      }
    ],
    edges: [
      {
        source: 'start',
        target: 'check-age',
        data: { event: 'submit' }
      },
      {
        source: 'check-age',
        target: 'adult-screen',
        data: { case: 'isAdult === true' }
      },
      {
        source: 'check-age',
        target: 'minor-screen',
        data: { case: 'isAdult === false' }
      }
    ]
  };

  const initialContext = {
    user: {
      age: 25
    },
    isAdult: null
  };

  try {
    const workflow = mapGraphDataToWorkflow(graphData, initialContext);
    console.log('‚úÖ Workflow converted:', workflow);

    const api = new WorkflowAPI('https://sandkittens.me');
    const response = await api.saveWorkflow(workflow.states, workflow.predefined_context);
    
    console.log('‚úÖ Server response:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Error:', error.message);
    throw error;
  }
}

// ============================================
// –ü—Ä–∏–º–µ—Ä 5: –¢–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
// ============================================

export function testValidationOnly() {
  console.log('üß™ Test 5: Validation Only');

  const graphData = {
    nodes: [
      {
        id: '__init__',
        type: 'service',
        data: {
          label: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è',
          isServiceNode: true,
          start: true
        }
      },
      {
        id: 'main',
        type: 'screen',
        data: {
          label: '–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
          final: true
        }
      }
    ],
    edges: [
      {
        source: '__init__',
        target: 'main',
        data: { event: 'ready' }
      }
    ]
  };

  const initialContext = {
    app: {
      initialized: false
    }
  };

  try {
    const workflow = mapGraphDataToWorkflow(graphData, initialContext);
    console.log('‚úÖ Workflow structure:', workflow);

    const api = new WorkflowAPI();
    api.validateWorkflow(workflow.states);
    
    console.log('‚úÖ Validation passed!');
    return workflow;
  } catch (error) {
    console.error('‚ùå Validation error:', error.message);
    throw error;
  }
}

// ============================================
// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
// ============================================

export async function runAllTests() {
  console.log('üöÄ Running all Workflow Integration tests...\n');

  const tests = [
    { name: 'Simple Flow', fn: testSimpleFlow },
    { name: 'API Call Flow', fn: testApiCallFlow },
    { name: 'Technical Flow', fn: testTechnicalFlow },
    { name: 'Condition Flow', fn: testConditionFlow },
    { name: 'Validation Only', fn: testValidationOnly }
  ];

  const results = [];

  for (const test of tests) {
    try {
      console.log(`\n‚ñ∂Ô∏è  Running: ${test.name}`);
      const result = await test.fn();
      results.push({ name: test.name, status: 'passed', result });
      console.log(`‚úÖ ${test.name} passed\n`);
    } catch (error) {
      results.push({ name: test.name, status: 'failed', error: error.message });
      console.log(`‚ùå ${test.name} failed: ${error.message}\n`);
    }
  }

  console.log('\nüìä Test Results Summary:');
  console.table(results.map(r => ({
    Test: r.name,
    Status: r.status,
    Details: r.status === 'passed' ? '‚úì' : r.error
  })));

  return results;
}

// ============================================
// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
// ============================================

if (typeof window !== 'undefined') {
  window.workflowTests = {
    testSimpleFlow,
    testApiCallFlow,
    testTechnicalFlow,
    testConditionFlow,
    testValidationOnly,
    runAllTests
  };

  console.log(`
  üì¶ Workflow Integration Tests loaded!
  
  –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª–∏:
  - window.workflowTests.testSimpleFlow()
  - window.workflowTests.testApiCallFlow()
  - window.workflowTests.testTechnicalFlow()
  - window.workflowTests.testConditionFlow()
  - window.workflowTests.testValidationOnly()
  - window.workflowTests.runAllTests()
  `);
}
