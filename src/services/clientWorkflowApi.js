/**
 * Client Workflow API
 * 
 * API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–º workflow —á–µ—Ä–µ–∑ /client/workflow endpoint.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç client_session_id –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.
 */

import { getClientSessionId, touchClientSession } from '../utils/clientSession.js';
import { getApiUrl, API_ENDPOINTS, logApiRequest, logApiResponse, logApiError } from '../config/api.js';

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—É—Å–∫–æ–≤ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ workflow
const startingWorkflows = new Map(); // workflowId -> Promise
// –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö workflow, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
const workflowDataCache = new Map(); // workflowId -> { data, timestamp }
const CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç API: –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ "None", "null", "undefined", "False", "True" –≤ null/boolean
 * –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON-—Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã/–º–∞—Å—Å–∏–≤—ã
 * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç API
 * @returns {Object} - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
function normalizeContext(context) {
  if (!context || typeof context !== 'object') {
    return context;
  }

  const normalized = {};
  
  for (const [key, value] of Object.entries(context)) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –ø—É—Å—Ç—ã—à–∫–∏ –≤ null
    if (value === 'None' || value === 'null' || value === 'undefined') {
      normalized[key] = null;
      continue;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –±—É–ª–µ–≤—ã –∑–Ω–∞—á–µ–Ω–∏—è (Python –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "True"/"False")
    if (value === 'False' || value === 'false') {
      normalized[key] = false;
      continue;
    }
    if (value === 'True' || value === 'true') {
      normalized[key] = true;
      continue;
    }

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON-—Å—Ç—Ä–æ–∫–∏ (Python –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞—Ä–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏)
    if (typeof value === 'string' && (value.startsWith('[') || value.startsWith('{'))) {
      try {
        // –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ JSON.parse
        const jsonString = value.replace(/'/g, '"');
        normalized[key] = JSON.parse(jsonString);
        continue;
      } catch {
        // –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      }
    }

    normalized[key] = value;
  }

  return normalized;
}

/**
 * –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç /client/workflow
 * @typedef {Object} ClientWorkflowResponse
 * @property {string} session_id - ID —Å–µ—Å—Å–∏–∏
 * @property {Object} context - –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤–∫–ª—é—á–∞—è __workflow_id, __created_at)
 * @property {string} current_state - –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @property {string} state_type - –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è (screen, technical, integration, service)
 * @property {Object} screen - –û–±—ä–µ–∫—Ç —ç–∫—Ä–∞–Ω–∞ (–¥–ª—è state_type === 'screen')
 */

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π workflow (–ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ)
 * 
 * @param {string} workflowId - ID workflow –¥–ª—è –∑–∞–ø—É—Å–∫–∞
 * @param {Object} initialContext - –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {boolean} useCache - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –∫—ç—à (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true)
 * @returns {Promise<ClientWorkflowResponse>}
 */
export async function startClientWorkflow(workflowId, initialContext = {}, useCache = true) {
  // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (useCache) {
    const cached = workflowDataCache.get(workflowId);
    if (cached && (Date.now() - cached.timestamp) < CACHE_TTL) {
      console.log('üì¶ [ClientWorkflow] Using cached workflow data:', workflowId);
      return cached.data;
    }
  }
  
  // ‚úÖ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –µ—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –∑–∞–ø—É—Å–∫ —ç—Ç–æ–≥–æ workflow, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Promise
  if (startingWorkflows.has(workflowId)) {
    console.warn('‚ö†Ô∏è [ClientWorkflow] startClientWorkflow blocked: already starting workflow', workflowId);
    return startingWorkflows.get(workflowId);
  }
  
  const clientSessionId = getClientSessionId();
  const url = getApiUrl(API_ENDPOINTS.WORKFLOW);
  const payload = {
    client_session_id: clientSessionId,
    client_workflow_id: workflowId,
    initial_context: initialContext
  };
  
  console.log('üöÄ [ClientWorkflow] Starting workflow:', {
    workflowId,
    clientSessionId,
    initialContext,
    timestamp: new Date().toISOString(),
    stack: new Error().stack?.split('\n').slice(2, 5).join('\n') // Stack trace –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  });
  
  const startTime = Date.now();
  logApiRequest('POST', url, payload);

  // –°–æ–∑–¥–∞—ë–º Promise –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
  const startPromise = (async () => {
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to start workflow: ${response.status} ${errorText}`);
      }

      const data = await response.json();
      const duration = Date.now() - startTime;
      logApiResponse('POST', url, response, duration);
      touchClientSession();
      
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (data.context) {
        data.context = normalizeContext(data.context);
      }
      
      console.log('‚úÖ [ClientWorkflow] Workflow started:', {
        session_id: data.session_id,
        current_state: data.current_state,
        state_type: data.state_type
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      if (useCache) {
        workflowDataCache.set(workflowId, {
          data,
          timestamp: Date.now()
        });
      }

      return data;
    } catch (error) {
      const duration = Date.now() - startTime;
      logApiError('POST', url, error, duration);
      console.error('‚ùå [ClientWorkflow] Start failed:', error);
      throw error;
    } finally {
      // –£–¥–∞–ª—è–µ–º –∏–∑ Map –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—É—Å–ø–µ—Ö–∞ –∏–ª–∏ –æ—à–∏–±–∫–∏)
      startingWorkflows.delete(workflowId);
    }
  })();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º Promise –≤ Map
  startingWorkflows.set(workflowId, startPromise);
  
  return startPromise;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç action –∏ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
 * 
 * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "click", "submit")
 * @param {Object} inputs - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã/–∏–Ω–ø—É—Ç–æ–≤
 * @returns {Promise<ClientWorkflowResponse>}
 */
export async function sendClientAction(eventName, inputs = {}) {
  const clientSessionId = getClientSessionId();
  const url = `${getApiUrl(API_ENDPOINTS.WORKFLOW)}`;
  const payload = {
    client_session_id: clientSessionId,
    event_name: eventName,
    context: inputs
  };
  
  console.log('üì§ [ClientWorkflow] Sending action:', {
    clientSessionId,
    eventName,
    inputs
  });
  
  const startTime = Date.now();
  logApiRequest('POST', url, payload);

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to send action: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    const duration = Date.now() - startTime;
    logApiResponse('POST', url, response, duration);
    touchClientSession();
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (data.context) {
      data.context = normalizeContext(data.context);
    }
    
    console.log('‚úÖ [ClientWorkflow] Action processed:', {
      session_id: data.session_id,
      current_state: data.current_state,
      state_type: data.state_type
    });

    return data;
  } catch (error) {
    const duration = Date.now() - startTime;
    logApiError('POST', url, error, duration);
    console.error('‚ùå [ClientWorkflow] Action failed:', error);
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ workflow –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
 * 
 * @returns {Promise<ClientWorkflowResponse>}
 */
export async function getCurrentWorkflowState() {
  const clientSessionId = getClientSessionId();
  const url = `${getApiUrl(API_ENDPOINTS.WORKFLOW)}/state`;
  const payload = { client_session_id: clientSessionId };
  
  console.log('üîç [ClientWorkflow] Getting current state for:', clientSessionId);
  
  const startTime = Date.now();
  logApiRequest('POST', url, payload);

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to get state: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    const duration = Date.now() - startTime;
    logApiResponse('POST', url, response, duration);
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (data.context) {
      data.context = normalizeContext(data.context);
    }
    
    console.log('‚úÖ [ClientWorkflow] Current state:', {
      session_id: data.session_id,
      current_state: data.current_state,
      state_type: data.state_type
    });

    return data;
  } catch (error) {
    const duration = Date.now() - startTime;
    logApiError('POST', url, error, duration);
    console.error('‚ùå [ClientWorkflow] Get state failed:', error);
    throw error;
  }
}

/**
 * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç workflow (–Ω–∞—á–∏–Ω–∞–µ—Ç —Å –Ω–∞—á–∞–ª–∞)
 * 
 * @returns {Promise<ClientWorkflowResponse>}
 */
export async function resetClientWorkflow() {
  const clientSessionId = getClientSessionId();
  const url = `${getApiUrl(API_ENDPOINTS.WORKFLOW)}`;
  const payload = { client_session_id: clientSessionId };
  
  console.log('üîÑ [ClientWorkflow] Resetting workflow for:', clientSessionId);
  
  const startTime = Date.now();
  logApiRequest('POST', url, payload);

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Failed to reset workflow: ${response.status} ${errorText}`);
    }

    const data = await response.json();
    const duration = Date.now() - startTime;
    logApiResponse('POST', url, response, duration);
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (data.context) {
      data.context = normalizeContext(data.context);
    }
    
    console.log('‚úÖ [ClientWorkflow] Workflow reset:', {
      session_id: data.session_id,
      current_state: data.current_state
    });

    return data;
  } catch (error) {
    const duration = Date.now() - startTime;
    logApiError('POST', url, error, duration);
    console.error('‚ùå [ClientWorkflow] Reset failed:', error);
    throw error;
  }
}

/**
 * Health check –¥–ª—è API
 * 
 * @returns {Promise<boolean>}
 */
export async function checkClientWorkflowHealth() {
  const url = `${getApiUrl(API_ENDPOINTS.WORKFLOW).replace('/client/workflow', '')}/healthcheck`;
  try {
    logApiRequest('GET', url);
    const response = await fetch(url, {
      method: 'GET'
    });
    logApiResponse('GET', url, response, 0);
    return response.ok;
  } catch (error) {
    logApiError('GET', url, error, 0);
    console.warn('‚ö†Ô∏è [ClientWorkflow] Health check failed:', error);
    return false;
  }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à workflow (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —è–≤–Ω–æ–º —Å–±—Ä–æ—Å–µ –∏–ª–∏ –≤—ã—Ö–æ–¥–µ)
 * 
 * @param {string} [workflowId] - ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ workflow, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –æ—á–∏—â–∞–µ—Ç—Å—è –≤–µ—Å—å –∫—ç—à
 */
export function clearWorkflowCache(workflowId) {
  if (workflowId) {
    workflowDataCache.delete(workflowId);
    console.log('üóëÔ∏è [ClientWorkflow] Cache cleared for workflow:', workflowId);
  } else {
    workflowDataCache.clear();
    console.log('üóëÔ∏è [ClientWorkflow] All workflow cache cleared');
  }
}

export default {
  startClientWorkflow,
  sendClientAction,
  getCurrentWorkflowState,
  resetClientWorkflow,
  checkClientWorkflowHealth,
  clearWorkflowCache
};
