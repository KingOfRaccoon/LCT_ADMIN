/**
 * Workflow Mapper - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è BDUI graphData –≤ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π StateModel —Ñ–æ—Ä–º–∞—Ç
 * 
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É nodes/edges –≤ —Ñ–æ—Ä–º–∞—Ç,
 * —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å —Å–µ—Ä–≤–µ—Ä–Ω—ã–º Workflow API —Å–æ–≥–ª–∞—Å–Ω–æ integration-guide.md
 */

import '../types/workflowContract.js';

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —É–∑–ª–∞ BDUI
 * @param {Object} node - –£–∑–µ–ª –∏–∑ graphData
 * @returns {StateType} –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è
 */
function detectStateType(node) {
  const nodeType = node.type?.toLowerCase();
  const nodeData = node.data || {};

  // Action —É–∑–ª—ã —Å API –≤—ã–∑–æ–≤–∞–º–∏
  if (nodeType === 'action' && nodeData.actionType === 'api-call') {
    return 'integration';
  }

  // Action —É–∑–ª—ã —Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º–∏/—É—Å–ª–æ–≤–∏—è–º–∏
  if (nodeType === 'action' && 
      (nodeData.actionType === 'condition' || 
       nodeData.actionType === 'modify-cart-item' ||
       nodeData.actionType === 'calculation')) {
    return 'technical';
  }

  // Screen —É–∑–ª—ã
  if (nodeType === 'screen') {
    return 'screen';
  }

  // Service —É–∑–ª—ã (init, cleanup –∏ —Ç.–¥.)
  if (nodeType === 'service' || nodeData.isServiceNode) {
    return 'service';
  }

  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - screen
  return 'screen';
}

/**
 * –°–æ–∑–¥–∞–µ—Ç expressions –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @param {Object} nodeData - –î–∞–Ω–Ω—ã–µ —É–∑–ª–∞
 * @returns {TechnicalExpression[]}
 */
function createTechnicalExpressions(nodeData) {
  const expressions = [];
  
  if (nodeData.actionType === 'condition') {
    // –£—Å–ª–æ–≤–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    const variable = nodeData.config?.resultVariable || 'result';
    const condition = nodeData.config?.condition || 'true';
    const deps = nodeData.config?.dependencies || [];

    expressions.push({
      variable,
      dependent_variables: deps,
      expression: condition
    });
  } else if (nodeData.actionType === 'modify-cart-item') {
    // –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã
    const variable = 'cart.items';
    const deps = ['cart.items', 'inputs.itemId', 'inputs.delta'];
    const expr = 'modifyCartItem(cart.items, inputs.itemId, inputs.delta)';

    expressions.push({
      variable,
      dependent_variables: deps,
      expression: expr
    });
  } else if (nodeData.contextPatch) {
    // –û–±—â–∏–π —Å–ª—É—á–∞–π - –∏–∑ contextPatch
    Object.entries(nodeData.contextPatch).forEach(([key, value]) => {
      if (typeof value === 'string' && value.includes('${')) {
        // –≠—Ç–æ –±–∏–Ω–¥–∏–Ω–≥ - –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        const deps = extractDependencies(value);
        expressions.push({
          variable: key,
          dependent_variables: deps,
          expression: value
        });
      }
    });
  }

  return expressions;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç expressions –¥–ª—è integration —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @param {Object} nodeData - –î–∞–Ω–Ω—ã–µ —É–∑–ª–∞
 * @returns {IntegrationExpression[]}
 */
function createIntegrationExpressions(nodeData) {
  const expressions = [];
  const config = nodeData.config || {};

  if (config.url) {
    expressions.push({
      variable: config.resultVariable || 'apiResult',
      url: config.url,
      params: config.params || {},
      method: config.method?.toLowerCase() || 'get'
    });
  }

  return expressions;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç expressions –¥–ª—è screen —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @param {Object} nodeData - –î–∞–Ω–Ω—ã–µ —É–∑–ª–∞
 * @param {Array} outgoingEdges - –ò—Å—Ö–æ–¥—è—â–∏–µ —Ä—ë–±—Ä–∞
 * @returns {EventExpression[]}
 */
function createScreenExpressions(nodeData, outgoingEdges) {
  const expressions = [];

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ä—ë–±–µ—Ä
  outgoingEdges.forEach(edge => {
    const eventName = edge.data?.event || edge.label || edge.id;
    if (eventName && !expressions.find(e => e.event_name === eventName)) {
      expressions.push({
        event_name: eventName
      });
    }
  });

  return expressions;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –±–∏–Ω–¥–∏–Ω–≥–∞–º–∏
 * @param {string} value - –ó–Ω–∞—á–µ–Ω–∏–µ —Å –±–∏–Ω–¥–∏–Ω–≥–∞–º–∏ ${...}
 * @returns {string[]} –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
function extractDependencies(value) {
  const deps = new Set();
  const regex = /\$\{([^}]+)\}/g;
  let match;

  while ((match = regex.exec(value)) !== null) {
    const varName = match[1].trim();
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–¥–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏ –∏–ª–∏ —Å–∫–æ–±–∫–∏)
    const baseName = varName.split(/[.[\s]/)[0];
    if (baseName) {
      deps.add(baseName);
    }
  }

  return Array.from(deps);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç transitions –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @param {Array} outgoingEdges - –ò—Å—Ö–æ–¥—è—â–∏–µ —Ä—ë–±—Ä–∞
 * @param {StateType} stateType - –¢–∏–ø —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * @param {Map} nodeIdToName - –ö–∞—Ä—Ç–∞ nodeId -> state_name
 * @returns {Transition[]}
 */
function createTransitions(outgoingEdges, stateType, nodeIdToName) {
  const transitions = [];

  if (stateType === 'integration') {
    // Integration state –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–æ–≤–Ω–æ 1 transition —Å case=null
    if (outgoingEdges.length > 0) {
      const firstEdge = outgoingEdges[0];
      const targetStateName = nodeIdToName.get(firstEdge.target) || firstEdge.target;
      transitions.push({
        state_id: targetStateName,
        case: null
      });
    }
  } else {
    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ - –≤—Å–µ transitions
    outgoingEdges.forEach(edge => {
      const targetStateName = nodeIdToName.get(edge.target) || edge.target;
      const transition = {
        state_id: targetStateName
      };

      // –î–æ–±–∞–≤–ª—è–µ–º case –µ—Å–ª–∏ –µ—Å—Ç—å —É—Å–ª–æ–≤–∏–µ
      const condition = edge.data?.case || edge.data?.condition;
      if (condition) {
        transition.case = condition;
      } else {
        transition.case = null;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º variable –µ—Å–ª–∏ –µ—Å—Ç—å
      const variable = edge.data?.variable;
      if (variable) {
        transition.variable = variable;
      }

      transitions.push(transition);
    });
  }

  return transitions;
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–¥–∏–Ω —É–∑–µ–ª BDUI –≤ StateModel
 * @param {Object} node - –£–∑–µ–ª –∏–∑ graphData
 * @param {Array} allEdges - –í—Å–µ —Ä—ë–±—Ä–∞ –≥—Ä–∞—Ñ–∞
 * @param {Set} initialNodes - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤
 * @param {Set} finalNodes - –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–Ω–µ—á–Ω—ã—Ö —É–∑–ª–æ–≤
 * @param {Map} nodeIdToName - –ö–∞—Ä—Ç–∞ nodeId -> state_name
 * @returns {StateModel}
 */
function mapNodeToState(node, allEdges, initialNodes, finalNodes, nodeIdToName) {
  const stateType = detectStateType(node);
  const nodeData = node.data || {};
  const outgoingEdges = allEdges.filter(e => e.source === node.id);

  // –°–æ–∑–¥–∞–µ–º expressions –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  let expressions = [];
  if (stateType === 'technical') {
    expressions = createTechnicalExpressions(nodeData);
  } else if (stateType === 'integration') {
    expressions = createIntegrationExpressions(nodeData);
  } else if (stateType === 'screen') {
    expressions = createScreenExpressions(nodeData, outgoingEdges);
  }

  // –°–æ–∑–¥–∞–µ–º transitions
  const transitions = createTransitions(outgoingEdges, stateType, nodeIdToName);

  return {
    state_type: stateType,
    name: nodeData.label || node.id,
    initial_state: initialNodes.has(node.id),
    final_state: finalNodes.has(node.id),
    expressions: expressions,
    transitions: transitions
  };
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —É–∑–ª—ã
 * @param {Array} nodes - –í—Å–µ —É–∑–ª—ã
 * @param {Array} edges - –í—Å–µ —Ä—ë–±—Ä–∞
 * @returns {{initialNodes: Set, finalNodes: Set}}
 */
function findInitialAndFinalNodes(nodes, edges) {
  const hasIncoming = new Set();
  const hasOutgoing = new Set();

  edges.forEach(edge => {
    hasIncoming.add(edge.target);
    hasOutgoing.add(edge.source);
  });

  console.log('üîç [findInitialAndFinalNodes] Analyzing graph structure:', {
    totalNodes: nodes.length,
    totalEdges: edges.length,
    nodesWithIncoming: hasIncoming.size,
    nodesWithOutgoing: hasOutgoing.size,
    nodesWithoutIncoming: nodes.filter(n => !hasIncoming.has(n.id)).map(n => n.id),
    nodesWithoutOutgoing: nodes.filter(n => !hasOutgoing.has(n.id)).map(n => n.id)
  });

  // –ù–∞—á–∞–ª—å–Ω—ã–µ —É–∑–ª—ã - —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Ä—ë–±–µ—Ä
  const initialNodes = new Set(
    nodes
      .filter(node => !hasIncoming.has(node.id) || node.data?.start === true)
      .map(node => node.id)
  );

  // –ö–æ–Ω–µ—á–Ω—ã–µ —É–∑–ª—ã - —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö —Ä—ë–±–µ—Ä
  const finalNodes = new Set(
    nodes
      .filter(node => !hasOutgoing.has(node.id) || node.data?.final === true)
      .map(node => node.id)
  );

  console.log('üîç [findInitialAndFinalNodes] Before fallback logic:', {
    initialNodes: Array.from(initialNodes),
    finalNodes: Array.from(finalNodes)
  });

  // –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ –ø–æ–º–µ—á–µ–Ω–Ω—ã—Ö –Ω–∞—á–∞–ª—å–Ω—ã—Ö - –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –±–µ–∑ –≤—Ö–æ–¥—è—â–∏—Ö
  if (initialNodes.size === 0 && nodes.length > 0) {
    const firstNode = nodes.find(n => !hasIncoming.has(n.id)) || nodes[0];
    initialNodes.add(firstNode.id);
    console.log('‚ö†Ô∏è [findInitialAndFinalNodes] No initial nodes found, using fallback:', firstNode.id);
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–µ—á–Ω—ã—Ö - –¥–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã –±–µ–∑ –∏—Å—Ö–æ–¥—è—â–∏—Ö
  if (finalNodes.size === 0 && nodes.length > 0) {
    nodes.forEach(node => {
      if (!hasOutgoing.has(node.id)) {
        finalNodes.add(node.id);
      }
    });
    console.log('‚ö†Ô∏è [findInitialAndFinalNodes] No final nodes found, using fallback:', Array.from(finalNodes));
  }

  console.log('‚úÖ [findInitialAndFinalNodes] Final result:', {
    initialNodes: Array.from(initialNodes),
    finalNodes: Array.from(finalNodes)
  });

  return { initialNodes, finalNodes };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è BDUI graphData –≤ StateModel[]
 * @param {Object} graphData - graphData –∏–∑ VirtualContext (nodes + edges)
 * @param {Object} [initialContext] - –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * @returns {{states: StateModel[], predefined_context: Object}}
 */
export function mapGraphDataToWorkflow(graphData, initialContext = {}) {
  const { nodes = [], edges = [] } = graphData;

  console.log('üó∫Ô∏è [workflowMapper] Starting graph to workflow conversion:', {
    nodesCount: nodes.length,
    edgesCount: edges.length,
    nodeIds: nodes.map(n => n.id),
    nodeLabels: nodes.map(n => n.data?.label || n.id)
  });

  if (nodes.length === 0) {
    throw new Error('Graph must contain at least one node');
  }

  // –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É nodeId -> name –¥–ª—è —Ä–µ–∑–æ–ª–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
  const nodeIdToName = new Map();
  nodes.forEach(node => {
    const stateName = node.data?.label || node.id;
    nodeIdToName.set(node.id, stateName);
  });

  console.log('üó∫Ô∏è [workflowMapper] NodeId -> StateName mapping:', 
    Array.from(nodeIdToName.entries()).map(([id, name]) => `${id} -> "${name}"`)
  );

  // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —É–∑–ª—ã
  const { initialNodes, finalNodes } = findInitialAndFinalNodes(nodes, edges);

  console.log('üó∫Ô∏è [workflowMapper] Initial and final nodes:', {
    initialCount: initialNodes.size,
    finalCount: finalNodes.size,
    initial: Array.from(initialNodes).map(id => {
      const name = nodeIdToName.get(id);
      return `${id} ("${name}")`;
    }),
    final: Array.from(finalNodes).map(id => {
      const name = nodeIdToName.get(id);
      return `${id} ("${name}")`;
    })
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–∂–¥—ã–π —É–∑–µ–ª –≤ StateModel
  const states = nodes.map(node => 
    mapNodeToState(node, edges, initialNodes, finalNodes, nodeIdToName)
  );

  console.log('üó∫Ô∏è [workflowMapper] Mapped states:', {
    count: states.length,
    stateNames: states.map(s => s.name),
    stateTypes: states.map(s => `${s.name}: ${s.state_type}`),
    initialStates: states.filter(s => s.initial_state).map(s => s.name),
    finalStates: states.filter(s => s.final_state).map(s => s.name),
    transitions: states.map(s => ({
      from: s.name,
      to: s.transitions.map(t => t.state_id)
    }))
  });

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞–ø–ø–∏–Ω–≥–∞
  const mappedStateNames = new Set(states.map(s => s.name));
  states.forEach(state => {
    state.transitions.forEach(t => {
      if (!mappedStateNames.has(t.state_id)) {
        console.error(`‚ùå [workflowMapper] Invalid transition: "${state.name}" -> "${t.state_id}" (target –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)`);
      }
    });
  });

  console.log('‚úÖ [workflowMapper] Mapping completed successfully');

  return {
    states,
    predefined_context: initialContext
  };
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON —Ñ–∞–π–ª
 * @param {Object} graphData - graphData –∏–∑ VirtualContext
 * @param {Object} initialContext - –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 * @returns {string} JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
export function exportWorkflowAsJson(graphData, initialContext = {}) {
  const workflow = mapGraphDataToWorkflow(graphData, initialContext);
  
  const exportData = {
    states: {
      states: workflow.states
    },
    predefined_context: workflow.predefined_context
  };

  return JSON.stringify(exportData, null, 2);
}
