/**
 * –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –æ–¥–Ω–∏–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º
 */

import { resolveBindingValue } from './src/pages/Sandbox/utils/bindings.js';

console.log('=== –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π —à–∞–±–ª–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ===\n');

const testCases = [
  { count: 0, expected: '–£–¥–∞–ª–∏—Ç—å (0)' },
  { count: 1, expected: '–£–¥–∞–ª–∏—Ç—å (1)' },
  { count: 5, expected: '–£–¥–∞–ª–∏—Ç—å (5)' },
  { count: 42, expected: '–£–¥–∞–ª–∏—Ç—å (42)' },
];

let passed = 0;
let failed = 0;

testCases.forEach(({ count, expected }) => {
  const context = {
    cart_response: {
      total_items_count: count
    }
  };

  const template = "–£–¥–∞–ª–∏—Ç—å (${cart_response.total_items_count})";
  
  const bindingValue = {
    reference: template,
    value: "–£–¥–∞–ª–∏—Ç—å (0)"
  };
  
  try {
    const result = resolveBindingValue(bindingValue, context);
    
    if (result === expected) {
      console.log(`‚úÖ ${count} ‚Üí "${result}"`);
      passed++;
    } else {
      console.log(`‚ùå ${count} ‚Üí –û–∂–∏–¥–∞–ª–æ—Å—å: "${expected}", –ü–æ–ª—É—á–µ–Ω–æ: "${result}"`);
      failed++;
    }
  } catch (error) {
    console.log(`‚ùå ${count} ‚Üí –û—à–∏–±–∫–∞: ${error.message}`);
    failed++;
  }
});

console.log(`\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ===`);
console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${testCases.length}`);
console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}/${testCases.length}`);

if (failed === 0) {
  console.log(`\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ—Å—Ç–∞—è —à–∞–±–ª–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`);
  process.exit(0);
} else {
  console.log(`\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.`);
  process.exit(1);
}
