/**
 * –¢–µ—Å—Ç —Ç—Ä–∞–Ω—Å–ø–∏–ª—è—Ü–∏–∏ Python ‚Üí JavaScript –≤ –±–∏–Ω–¥–∏–Ω–≥–∞—Ö
 */

import { transpilePythonToJs, safeEvalExpression, resolveReferenceWithPython } from './src/pages/Sandbox/utils/pythonToJs.js';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–∏–ª—è—Ü–∏–∏ Python ‚Üí JavaScript\n');

// –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
const testContext = {
  selected_items_count: 3,
  store: {
    name: 'Pear Store',
    rating: 4.8
  },
  cartItem: {
    advertisement_id: 5,
    price: 4990,
    title: 'MagSafe Charger',
    quantity: 2
  },
  inactive_product_ids: [3, 5, 7],
  cart_snapshot: {
    summary: {
      total_items: 3,
      total: 120979
    }
  }
};

// –¢–µ—Å—Ç—ã
const tests = [
  {
    name: 'Python str() ‚Üí JavaScript String()',
    python: "${'–£–¥–∞–ª–∏—Ç—å (' + str(selected_items_count) + ')'}",
    expected: '–£–¥–∞–ª–∏—Ç—å (3)'
  },
  {
    name: 'Python str() —Å —á–∏—Å–ª–æ–º',
    python: "${'‚≠ê ' + str(store.rating)}",
    expected: '‚≠ê 4.8'
  },
  {
    name: '–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è',
    python: "${cartItem.price + ' ‚ÇΩ'}",
    expected: '4990 ‚ÇΩ'
  },
  {
    name: 'Python —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å in',
    python: "${'0.5' if cartItem.advertisement_id in inactive_product_ids else '1.0'}",
    expected: '0.5'
  },
  {
    name: 'Python —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (—Ü–≤–µ—Ç)',
    python: "${'#8E8E93' if cartItem.advertisement_id in inactive_product_ids else '#000000'}",
    expected: '#8E8E93'
  },
  {
    name: 'Python —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)',
    python: "${'–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω' if cartItem.advertisement_id in inactive_product_ids else ''}",
    expected: '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
  },
  {
    name: 'Python —Ç–µ—Ä–Ω–∞—Ä–Ω—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä (display)',
    python: "${'inline-block' if cartItem.advertisement_id in inactive_product_ids else 'none'}",
    expected: 'inline-block'
  },
  {
    name: '–°–ª–æ–∂–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏',
    python: "${str(cart_snapshot.summary.total_items) + ' —Ç–æ–≤–∞—Ä–∞'}",
    expected: '3 —Ç–æ–≤–∞—Ä–∞'
  },
  {
    name: '–°–ª–æ–∂–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å total',
    python: "${str(cart_snapshot.summary.total) + ' ‚ÇΩ'}",
    expected: '120979 ‚ÇΩ'
  },
  {
    name: '–¢–µ—Å—Ç —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º –ù–ï –≤ —Å–ø–∏—Å–∫–µ',
    python: "${'visible' if 999 in inactive_product_ids else 'hidden'}",
    expected: 'hidden'
  }
];

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
let passed = 0;
let failed = 0;

tests.forEach((test, index) => {
  console.log(`\n${index + 1}. ${test.name}`);
  console.log(`   Python: ${test.python}`);
  
  try {
    const result = resolveReferenceWithPython(test.python, testContext);
    const success = result === test.expected;
    
    if (success) {
      console.log(`   ‚úÖ PASS: "${result}"`);
      passed++;
    } else {
      console.log(`   ‚ùå FAIL: got "${result}", expected "${test.expected}"`);
      failed++;
    }
  } catch (error) {
    console.log(`   ‚ùå ERROR: ${error.message}`);
    failed++;
  }
});

// –ò—Ç–æ–≥–∏
console.log('\n' + '='.repeat(50));
console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${passed}/${tests.length} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–æ`);
if (failed > 0) {
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  process.exit(1);
} else {
  console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!');
  process.exit(0);
}
