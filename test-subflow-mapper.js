#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ subflow —á–µ—Ä–µ–∑ workflowMapper
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. ‚úÖ GraphData ‚Üí StateModel –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
 * 2. ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
 * 3. ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–∞–ø–ø–µ—Ä
 */

import { mapGraphDataToWorkflow } from './src/utils/workflowMapper.js';

console.log('üß™ Test: Subflow Mapper Integration\n');

// Mock GraphData subflow
const graphDataSubflow = {
  name: 'test-subflow',
  nodes: [
    {
      id: 'screen1',
      type: 'screen',
      label: 'First Screen',
      screenId: 'screen_1',
      start: true,
      edges: [
        {
          id: 'edge1',
          event: 'continue',
          target: 'screen2',
          contextPatch: {}
        }
      ]
    },
    {
      id: 'screen2',
      type: 'screen',
      label: 'Second Screen',
      screenId: 'screen_2',
      final: true,
      edges: []
    }
  ]
};

console.log('1Ô∏è‚É£ Test: GraphData format detection');
console.log(`   Has nodes: ${!!graphDataSubflow.nodes}`);
console.log(`   Nodes count: ${graphDataSubflow.nodes.length}`);
console.log('   ‚úÖ GraphData format detected\n');

console.log('2Ô∏è‚É£ Test: Convert GraphData to StateModel');
try {
  const result = mapGraphDataToWorkflow(graphDataSubflow, {});
  
  console.log(`   ‚úÖ Conversion successful`);
  console.log(`   States count: ${result.states.length}`);
  console.log(`   Context: ${JSON.stringify(result.predefined_context)}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const firstState = result.states[0];
  console.log(`\n   First state:`);
  console.log(`   - state_id: ${firstState.state_id}`);
  console.log(`   - state_type: ${firstState.state_type}`);
  console.log(`   - screen: ${JSON.stringify(firstState.screen)}`);
  console.log(`   - transitions: ${firstState.transitions?.length || 0}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±—ç–∫–µ–Ω–¥–∞
  const isValidFormat = 
    Array.isArray(result.states) &&
    result.states.every(s => s.state_id && s.state_type && s.screen);
  
  console.log(`\n   ${isValidFormat ? '‚úÖ' : '‚ùå'} Valid StateModel format for backend\n`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  console.log('3Ô∏è‚É£ Result structure:');
  console.log(JSON.stringify(result, null, 2));
  
} catch (error) {
  console.error('   ‚ùå Conversion failed:', error.message);
  process.exit(1);
}

console.log('\n‚úÖ All tests passed! Subflow mapper works correctly.\n');

console.log('üìã Usage in SubflowRegistry:');
console.log(`
const mapped = mapGraphDataToWorkflow(subflow.definition, {});
const states = mapped.states;
const context = mapped.predefined_context || {};

// –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –±—ç–∫–µ–Ω–¥
const response = await api.saveWorkflow(states, context);
`);
