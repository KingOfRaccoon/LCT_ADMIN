/**
 * –¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ subflow —É–∑–ª–æ–≤ –≤ StateModel
 */

import { mapGraphDataToWorkflow } from './src/utils/workflowMapper.js';

// –¢–µ—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ —Å subflow —É–∑–ª–æ–º
const testGraphData = {
  nodes: [
    {
      id: 'start-screen',
      type: 'screen',
      data: {
        label: '–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
        screenId: 'main-screen'
      }
    },
    {
      id: 'onboarding-subflow',
      type: 'subflow',
      state_type: 'subflow',
      data: {
        label: '–û–Ω–±–æ—Ä–¥',
        subflow_workflow_id: 'onboarding-flow',
        input_mapping: {
          user_id: 'context.user.id',
          session_token: 'context.session.token'
        },
        output_mapping: {
          'subflow.onboarding_complete': 'context.onboarding.status',
          'subflow.user_preferences': 'context.user.preferences'
        },
        dependent_variables: ['user_id', 'session_token'],
        error_variable: 'onboarding_error'
      },
      expressions: [
        {
          variable: 'insurance_result',  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ variable
          subflow_workflow_id: 'onboarding-flow',
          input_mapping: {
            user_id: 'context.user.id',
            session_token: 'context.session.token'
          },
          output_mapping: {
            'subflow.onboarding_complete': 'context.onboarding.status',
            'subflow.user_preferences': 'context.user.preferences'
          },
          dependent_variables: ['user_id', 'session_token'],
          error_variable: 'onboarding_error'
        }
      ],
      transitions: [
        {
          variable: 'insurance_result',  // ‚úÖ –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å variable –≤ expression
          case: true,
          state_id: 'success-screen'
        },
        {
          variable: 'onboarding_error',
          case: null,
          state_id: 'error-screen'
        }
      ]
    },
    {
      id: 'success-screen',
      type: 'screen',
      data: {
        label: '–£—Å–ø–µ—à–Ω–æ',
        screenId: 'success-screen'
      }
    },
    {
      id: 'error-screen',
      type: 'screen',
      data: {
        label: '–û—à–∏–±–∫–∞',
        screenId: 'error-screen'
      }
    }
  ],
  edges: [
    {
      id: 'e1',
      source: 'start-screen',
      target: 'onboarding-subflow',
      label: '–ù–∞—á–∞—Ç—å –æ–Ω–±–æ—Ä–¥'
    }
  ],
  screens: {
    'main-screen': {
      title: '–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω',
      components: []
    },
    'success-screen': {
      title: '–£—Å–ø–µ—à–Ω–æ',
      components: []
    },
    'error-screen': {
      title: '–û—à–∏–±–∫–∞',
      components: []
    }
  }
};

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ subflow —É–∑–ª–æ–≤\n');

try {
  const result = mapGraphDataToWorkflow(testGraphData, {
    user: {
      id: 'test-user-123',
      name: 'Test User'
    },
    session: {
      token: 'test-token-abc'
    }
  });

  console.log('‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω\n');
  console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  console.log(`   - –í—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–π: ${result.states.length}`);
  console.log(`   - State types: ${result.states.map(s => s.state_type).join(', ')}\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º subflow —É–∑–µ–ª
  const subflowState = result.states.find(s => s.state_type === 'subflow');
  
  if (subflowState) {
    console.log('üîç –ù–∞–π–¥–µ–Ω subflow —É–∑–µ–ª:');
    console.log(`   - Name: ${subflowState.name}`);
    console.log(`   - State type: ${subflowState.state_type}`);
    console.log(`   - Expressions: ${subflowState.expressions.length}`);
    console.log(`   - Transitions: ${subflowState.transitions.length}\n`);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É
    console.log('ÔøΩ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É:');
    
    const checks = [
      { name: 'screen = {}', pass: JSON.stringify(subflowState.screen) === '{}' },
      { name: 'events = []', pass: Array.isArray(subflowState.events) && subflowState.events.length === 0 },
      { name: 'expression.variable —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', pass: !!subflowState.expressions[0]?.variable },
      { name: 'variable —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å transition', pass: subflowState.expressions[0]?.variable === subflowState.transitions[0]?.variable },
      { name: 'initial_state –æ–ø—Ä–µ–¥–µ–ª—ë–Ω', pass: typeof subflowState.initial_state === 'boolean' },
      { name: 'final_state –æ–ø—Ä–µ–¥–µ–ª—ë–Ω', pass: typeof subflowState.final_state === 'boolean' }
    ];

    checks.forEach(check => {
      console.log(`   ${check.pass ? '‚úÖ' : '‚ùå'} ${check.name}`);
    });

    const allPassed = checks.every(c => c.pass);

    console.log('\nÔøΩüìù Expression –¥–µ—Ç–∞–ª–∏:');
    console.log(JSON.stringify(subflowState.expressions[0], null, 2));

    console.log('\nüîÄ Transitions:');
    subflowState.transitions.forEach((t, idx) => {
      console.log(`   ${idx + 1}. variable="${t.variable}", case=${t.case}, -> ${t.state_id}`);
    });

    console.log('\nüì¶ –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ state:');
    console.log(JSON.stringify(subflowState, null, 2));

    if (allPassed) {
      console.log('\n‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: Subflow —É–∑–µ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');
    } else {
      console.log('\n‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: –ù–∞–π–¥–µ–Ω—ã –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É');
      process.exit(1);
    }
  } else {
    console.error('‚ùå –û–®–ò–ë–ö–ê: Subflow —É–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å –¥—Ä—É–≥–∏–º —Ç–∏–ø–æ–º');
    console.log('\n–í—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:');
    result.states.forEach(s => {
      console.log(`   - ${s.name}: type=${s.state_type}, expressions=${s.expressions.length}`);
    });
  }

} catch (error) {
  console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ:');
  console.error(error.message);
  console.error(error.stack);
}
