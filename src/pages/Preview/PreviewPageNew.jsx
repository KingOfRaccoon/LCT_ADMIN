/**
 * PreviewPage - Simplified Client Workflow Preview
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç useClientWorkflow –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ workflow
 * –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–µ—Å–æ—á–Ω–∏—Ü—ã.
 */

import { useCallback, useEffect, useState, useRef } from 'react';
import { useSearchParams } from 'react-router-dom';
import SandboxScreenRenderer from '../Sandbox/SandboxScreenRenderer';
import { useClientWorkflow } from '../../hooks/useClientWorkflow';
import { Activity, RotateCcw, AlertCircle, ArrowLeft } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import './PreviewPage.css';

const PreviewPage = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const workflow = useClientWorkflow();
  
  const [formValues, setFormValues] = useState({});
  const isStartingRef = useRef(false);
  const startedWorkflowIdRef = useRef(null);
  
  // –ü–æ–ª—É—á–∞–µ–º workflow_id –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const workflowId = "68dd5eec8341ae5cb6c60018"; // searchParams.get('workflow_id') || searchParams.get('id');

  // –ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç workflow –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ API
    if (
      !isStartingRef.current &&
      !workflow.currentState &&
      workflow.isApiAvailable &&
      workflowId &&
      startedWorkflowIdRef.current !== workflowId
    ) {
      isStartingRef.current = true;
      startedWorkflowIdRef.current = workflowId;
      
      console.log('üöÄ [PreviewPage] Starting workflow:', workflowId);
      
      workflow.startWorkflow(workflowId, {})
        .then(() => {
          console.log('‚úÖ [PreviewPage] Workflow started successfully');
        })
        .catch(error => {
          console.error('‚ùå [PreviewPage] Failed to start:', error);
          isStartingRef.current = false;
          startedWorkflowIdRef.current = null;
        })
        .finally(() => {
          isStartingRef.current = false;
        });
    }
  }, [workflowId, workflow.isApiAvailable, workflow.currentState]); // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è formValues —Å context.inputs
  useEffect(() => {
    if (workflow.context?.inputs) {
      setFormValues({ ...workflow.context.inputs });
    }
  }, [workflow.context]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–ø—É—Ç–æ–≤
  const handleInputChange = useCallback((name, value) => {
    setFormValues((prev) => ({ ...prev, [name]: value }));
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
  const handleEvent = useCallback(async (eventName, eventParams = {}) => {
    if (!eventName || workflow.isLoading) {
      return;
    }

    const inputs = {
      ...formValues,
      ...eventParams
    };

    try {
      await workflow.sendAction(eventName, inputs);
    } catch (error) {
      console.error('‚ùå [PreviewPage] Event failed:', error);
    }
  }, [formValues, workflow]);

  // Loading state
  if (!workflowId) {
    return (
      <div className="preview-page">
        <div className="preview-error">
          <AlertCircle size={48} />
          <h2>–ù–µ —É–∫–∞–∑–∞–Ω workflow_id</h2>
          <p>–î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä ?workflow_id=... –≤ URL</p>
          <button onClick={() => navigate('/sandbox')} className="preview-btn">
            <ArrowLeft size={16} />
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ Sandbox
          </button>
        </div>
      </div>
    );
  }

  if (!workflow.isApiAvailable) {
    return (
      <div className="preview-page">
        <div className="preview-error">
          <AlertCircle size={48} />
          <h2>API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</h2>
          <p>Client Workflow API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.</p>
          <button onClick={() => window.location.reload()} className="preview-btn">
            <RotateCcw size={16} />
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="preview-page">
      {/* Header */}
      <header className="preview-header">
        <div className="preview-header-left">
          <button
            onClick={() => navigate(-1)}
            className="preview-back-btn"
            title="–ù–∞–∑–∞–¥"
          >
            <ArrowLeft size={20} />
          </button>
          <div className="preview-header-text">
            <h1>{workflow.currentState || 'Preview'}</h1>
            {workflow.stateType && (
              <span className="preview-state-badge">{workflow.stateType}</span>
            )}
          </div>
        </div>
        <div className="preview-header-right">
          <button
            onClick={workflow.refreshState}
            disabled={workflow.isLoading}
            className="preview-btn preview-btn-icon"
            title="–û–±–Ω–æ–≤–∏—Ç—å"
          >
            <Activity size={18} />
          </button>
          <button
            onClick={workflow.reset}
            disabled={workflow.isLoading}
            className="preview-btn preview-btn-icon"
            title="–°–±—Ä–æ—Å"
          >
            <RotateCcw size={18} />
          </button>
        </div>
      </header>

      {/* Error Banner */}
      {workflow.error && (
        <div className="preview-error-banner">
          <AlertCircle size={20} />
          <div>
            <strong>–û—à–∏–±–∫–∞:</strong> {workflow.error.message || String(workflow.error)}
          </div>
          <button onClick={workflow.clearError} className="preview-btn-close">
            ‚úï
          </button>
        </div>
      )}

      {/* Loading Indicator */}
      {workflow.isLoading && (
        <div className="preview-loading-bar">
          <div className="preview-loading-progress"></div>
        </div>
      )}

      {/* Content */}
      <div className="preview-content">
        {/* Screen Renderer */}
        {workflow.hasScreen && workflow.screen && (
          <div className="preview-screen">
            <SandboxScreenRenderer
              screen={workflow.screen}
              context={workflow.context}
              formValues={formValues}
              onInputChange={handleInputChange}
              onEvent={handleEvent}
              isEventPending={workflow.isLoading}
            />
          </div>
        )}

        {/* Technical State */}
        {workflow.isTechnicalState && (
          <div className="preview-technical-state">
            <div className="preview-technical-icon">‚öôÔ∏è</div>
            <h3>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ</h3>
            <p>{workflow.currentState}</p>
            <small>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥...</small>
          </div>
        )}

        {/* Empty State */}
        {!workflow.currentState && !workflow.isLoading && (
          <div className="preview-empty">
            <h3>–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ workflow</h3>
            <p>Workflow ID: {workflowId}</p>
          </div>
        )}
      </div>

      {/* Footer */}
      <footer className="preview-footer">
        <div className="preview-footer-info">
          <span>Session: {workflow.sessionId?.slice(0, 8)}...</span>
          <span>‚Ä¢</span>
          <span>State: {workflow.currentState || '‚Äî'}</span>
        </div>
      </footer>
    </div>
  );
};

export default PreviewPage;
