#!/usr/bin/env node

/**
 * –£–ª—É—á—à–µ–Ω–∏–µ UI –¥–ª—è avitoDemo.json
 * 
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏—Ä–º–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ Avito, –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É,
 * –æ—Ç—Å—Ç—É–ø—ã –∏ —Ä–∞–¥–∏—É—Å—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∞–ª—å–Ω–æ–º—É UI.
 */

import { readFileSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const filePath = join(__dirname, '../src/pages/Sandbox/data/avitoDemo.json');

console.log('üé® –£–ª—É—á—à–∞–µ–º UI –¥–ª—è avitoDemo...\n');

let content = readFileSync(filePath, 'utf8');
const originalSize = content.length;

// === 1. –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ Avito ===
console.log('1Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞...');

const colorMap = {
  // Primary Blue
  '#2563eb': '#0A74F0',
  '#1d4ed8': '#0A74F0',
  '#3b82f6': '#0A74F0',
  '#1e40af': '#0A74F0',
  
  // Success Green  
  '#10b981': '#00C853',
  '#059669': '#00C853',
  '#047857': '#00C853',
  
  // Accent Red
  '#ef4444': '#FF3333',
  '#dc2626': '#FF3333',
  '#b91c1c': '#FF3333',
  
  // Dark Text
  '#0f172a': '#2F3034',
  '#1e293b': '#2F3034',
  '#334155': '#2F3034',
  
  // Background
  '#f8fafc': '#F5F5F5',
  '#f1f5f9': '#F5F5F5',
  
  // Secondary Text
  '#64748b': '#8E8E93',
  '#475569': '#8E8E93',
  
  // Border
  '#e2e8f0': '#E5E5E5',
  '#cbd5e1': '#E5E5E5',
  '#94a3b8': '#E5E5E5',
};

let colorCount = 0;
Object.entries(colorMap).forEach(([oldColor, newColor]) => {
  const regex = new RegExp(oldColor.replace(/[#]/g, '\\#'), 'gi');
  const matches = content.match(regex);
  if (matches) {
    colorCount += matches.length;
    content = content.replace(regex, newColor);
  }
});

console.log(`   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ ${colorCount} —Ü–≤–µ—Ç–æ–≤\n`);

// === 2. –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ ===
console.log('2Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç—ã...');

// Font family
const fontRegex = /"fontFamily"\s*:\s*"[^"]*Inter[^"]*"/g;
const fontMatches = content.match(fontRegex);
if (fontMatches) {
  console.log(`   ‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ ${fontMatches.length} —à—Ä–∏—Ñ—Ç–æ–≤ –Ω–∞ -apple-system, Arial`);
  content = content.replace(fontRegex, '"fontFamily": "-apple-system, Arial, sans-serif"');
}

console.log();

// === 3. Border Radius (Avito –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 8-12px) ===
console.log('3Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–¥–∏—É—Å—ã...');

let radiusCount = 0;

// –ë–æ–ª—å—à–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: 24/28/32px -> 12px
const largeRadiusRegex = /"borderRadius"\s*:\s*"(24|28|32)px"/g;
const largeMatches = content.match(largeRadiusRegex);
if (largeMatches) {
  radiusCount += largeMatches.length;
  content = content.replace(largeRadiusRegex, '"borderRadius": "12px"');
}

// –°—Ä–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: 16/18/20px -> 8px
const mediumRadiusRegex = /"borderRadius"\s*:\s*"(16|18|20|22)px"/g;
const mediumMatches = content.match(mediumRadiusRegex);
if (mediumMatches) {
  radiusCount += mediumMatches.length;
  content = content.replace(mediumRadiusRegex, '"borderRadius": "8px"');
}

// –ö–Ω–æ–ø–∫–∏ –∏ –º–µ–ª–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã: 999px -> 8px (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º pill buttons)
const pillRadiusRegex = /"borderRadius"\s*:\s*"999px"/g;
const pillMatches = content.match(pillRadiusRegex);
if (pillMatches) {
  radiusCount += pillMatches.length;
  content = content.replace(pillRadiusRegex, '"borderRadius": "8px"');
}

console.log(`   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${radiusCount} —Ä–∞–¥–∏—É—Å–æ–≤\n`);

// === 4. –¢–µ–Ω–∏ (Avito –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–µ–≥–∫–∏–µ —Ç–µ–Ω–∏) ===
console.log('4Ô∏è‚É£ –£–ª—É—á—à–∞–µ–º —Ç–µ–Ω–∏...');

// –ó–∞–º–µ–Ω—è–µ–º —Ç—è–∂–µ–ª—ã–µ —Ç–µ–Ω–∏ –Ω–∞ –ª–µ–≥–∫–∏–µ
const heavyShadowRegex = /"boxShadow"\s*:\s*"0\s+\d+px\s+\d+px\s+-?\d+px\s+rgba\([^)]+\)"/g;
const shadowMatches = content.match(heavyShadowRegex);
if (shadowMatches) {
  console.log(`   ‚úÖ –û–±–ª–µ–≥—á–µ–Ω–æ ${shadowMatches.length} —Ç–µ–Ω–µ–π`);
  content = content.replace(heavyShadowRegex, '"boxShadow": "0 2px 8px rgba(0, 0, 0, 0.08)"');
}

console.log();

// === 5. –û—Ç—Å—Ç—É–ø—ã (–ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ 8px grid) ===
console.log('5Ô∏è‚É£ –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç—Å—Ç—É–ø—ã (8px grid)...');

let paddingCount = 0;

// –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫—Ä–∞—Ç–Ω—ã–µ 8
const paddingMap = {
  '6px': '8px',
  '10px': '8px',
  '14px': '16px',
  '18px': '16px',
  '20px': '16px',
  '22px': '24px',
  '26px': '24px',
  '28px': '24px',
  '30px': '32px',
  '36px': '32px',
};

Object.entries(paddingMap).forEach(([oldVal, newVal]) => {
  const regex = new RegExp(`"(padding[^"]*|margin[^"]*)"\s*:\s*"?${oldVal.replace('px', '')}(px)?"?`, 'g');
  const matches = content.match(regex);
  if (matches) {
    paddingCount += matches.length;
    content = content.replace(regex, (match) => match.replace(oldVal, newVal));
  }
});

console.log(`   ‚úÖ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ ${paddingCount} –æ—Ç—Å—Ç—É–ø–æ–≤\n`);

// === 6. –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è ===
console.log('6Ô∏è‚É£ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è Avito...');

// –£–ª—É—á—à–∞–µ–º –≤—ã—Å–æ—Ç—É –∫–Ω–æ–ø–æ–∫ (48px —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
content = content.replace(/"height"\s*:\s*"(40|44|50|52)px"/g, '"height": "48px"');

// –£–ª—É—á—à–∞–µ–º line-height –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
content = content.replace(/"lineHeight"\s*:\s*"?1\.2"?/g, '"lineHeight": "1.4"');
content = content.replace(/"lineHeight"\s*:\s*"?1\.3"?/g, '"lineHeight": "1.4"');

console.log('   ‚úÖ –£–ª—É—á—à–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –∏ line-height\n');

// === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===
writeFileSync(filePath, content, 'utf8');

const newSize = content.length;
const sizeDiff = newSize - originalSize;
const sizeChange = sizeDiff > 0 ? `+${sizeDiff}` : sizeDiff;

console.log('‚ïê'.repeat(50));
console.log('‚ú® –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
console.log('‚ïê'.repeat(50));
console.log(`üìÅ –§–∞–π–ª: ${filePath}`);
console.log(`üìè –†–∞–∑–º–µ—Ä: ${originalSize} ‚Üí ${newSize} –±–∞–π—Ç (${sizeChange})`);
console.log('\nüéØ –ß—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:');
console.log(`   ‚Ä¢ ${colorCount} —Ü–≤–µ—Ç–æ–≤ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É Avito`);
console.log(`   ‚Ä¢ –®—Ä–∏—Ñ—Ç—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ -apple-system, Arial`);
console.log(`   ‚Ä¢ ${radiusCount} —Ä–∞–¥–∏—É—Å–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã (8-12px)`);
console.log(`   ‚Ä¢ –¢–µ–Ω–∏ –æ–±–ª–µ–≥—á–µ–Ω—ã –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–∞`);
console.log(`   ‚Ä¢ ${paddingCount} –æ—Ç—Å—Ç—É–ø–æ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã (8px grid)`);
console.log(`   ‚Ä¢ –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É (48px height)`);
console.log('\nüì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:');
console.log('   npm run dev');
console.log('   ‚Üí http://localhost:5173/sandbox\n');
