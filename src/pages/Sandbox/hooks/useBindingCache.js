import { useRef, useCallback, useEffect } from 'react';
import { resolveBindingValue, isBindingValue } from '../utils/bindings';

/**
 * –§–ê–ó–ê 2: Hook –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–∑–æ–ª–≤–∞ –±–∏–Ω–¥–∏–Ω–≥–æ–≤
 * 
 * –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–∫–æ—Ä—è–µ—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö context,
 * –∫—ç—à–∏—Ä—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã resolveBindingValue –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * ```jsx
 * const { resolveCached, clearCache, getStats } = useBindingCache(context);
 * 
 * // –í–º–µ—Å—Ç–æ:
 * const value = resolveBindingValue(binding, context, fallback);
 * 
 * // –ò—Å–ø–æ–ª—å–∑—É–µ–º:
 * const value = resolveCached(binding, fallback);
 * ```
 * 
 * –ö—ç—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ context.
 */
export const useBindingCache = (context) => {
  const cacheRef = useRef(new Map());
  const statsRef = useRef({ hits: 0, misses: 0 });
  const contextHashRef = useRef(null);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const getContextHash = useCallback((ctx) => {
    return JSON.stringify(ctx);
  }, []);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞ –¥–ª—è –±–∏–Ω–¥–∏–Ω–≥–∞
  const getCacheKey = useCallback((binding, fallback) => {
    return `${JSON.stringify(binding)}::${fallback}`;
  }, []);
  
  // –û—á–∏—â–∞–µ–º –∫—ç—à –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  useEffect(() => {
    const currentHash = getContextHash(context);
    
    if (contextHashRef.current !== currentHash) {
      cacheRef.current.clear();
      contextHashRef.current = currentHash;
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –Ω–æ–≤–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
      if (statsRef.current.hits > 0 || statsRef.current.misses > 0) {
        console.log('üîÑ [BindingCache] Context changed, cache cleared', {
          previousStats: { ...statsRef.current },
          cacheSize: cacheRef.current.size
        });
      }
      
      statsRef.current = { hits: 0, misses: 0 };
    }
  }, [context, getContextHash]);
  
  /**
   * –†–µ–∑–æ–ª–≤–∏—Ç –±–∏–Ω–¥–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞
   */
  const resolveCached = useCallback((binding, fallback = undefined, iterationStack = []) => {
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –±–∏–Ω–¥–∏–Ω–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if (!isBindingValue(binding)) {
      return binding ?? fallback;
    }
    
    const cacheKey = getCacheKey(binding, fallback);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (cacheRef.current.has(cacheKey)) {
      statsRef.current.hits++;
      return cacheRef.current.get(cacheKey);
    }
    
    // –ö—ç—à –ø—Ä–æ–º–∞—Ö - —Ä–µ–∑–æ–ª–≤–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    statsRef.current.misses++;
    const resolved = resolveBindingValue(binding, context, fallback, iterationStack);
    cacheRef.current.set(cacheKey, resolved);
    
    return resolved;
  }, [context, getCacheKey]);
  
  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à –≤—Ä—É—á–Ω—É—é
   */
  const clearCache = useCallback(() => {
    const size = cacheRef.current.size;
    cacheRef.current.clear();
    statsRef.current = { hits: 0, misses: 0 };
    
    console.log('üóëÔ∏è [BindingCache] Cache manually cleared', { previousSize: size });
  }, []);
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∞
   */
  const getStats = useCallback(() => {
    const { hits, misses } = statsRef.current;
    const total = hits + misses;
    const hitRate = total > 0 ? (hits / total * 100).toFixed(2) : 0;
    
    return {
      hits,
      misses,
      total,
      hitRate: `${hitRate}%`,
      cacheSize: cacheRef.current.size
    };
  }, []);
  
  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
   */
  const logStats = useCallback(() => {
    const stats = getStats();
    
    if (stats.total > 0) {
      const emoji = parseFloat(stats.hitRate) > 70 ? 'üü¢' : parseFloat(stats.hitRate) > 40 ? 'üü°' : 'üî¥';
      
      console.log(`${emoji} [BindingCache] Stats:`, stats);
    }
  }, [getStats]);
  
  return {
    resolveCached,
    clearCache,
    getStats,
    logStats
  };
};

/**
 * Hook –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö props –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * ```jsx
 * const resolvedProps = useResolvedPropsCache(component, context);
 * ```
 */
export const useResolvedPropsCache = (component, context) => {
  const { resolveCached } = useBindingCache(context);
  const cacheRef = useRef(new Map());
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const componentKey = `${component.id}::${component.type}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
  if (cacheRef.current.has(componentKey)) {
    return cacheRef.current.get(componentKey);
  }
  
  // –†–µ–∑–æ–ª–≤–∏–º –≤—Å–µ props
  const props = component?.props ?? component?.properties ?? {};
  const resolvedProps = {};
  
  for (const [key, value] of Object.entries(props)) {
    resolvedProps[key] = resolveCached(value);
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
  cacheRef.current.set(componentKey, resolvedProps);
  
  return resolvedProps;
};

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
 */
export const measureCacheEfficiency = (cacheName, operation) => {
  const start = performance.now();
  const result = operation();
  const end = performance.now();
  const duration = end - start;
  
  console.log(`‚è±Ô∏è [CacheEfficiency] ${cacheName}:`, {
    duration: `${duration.toFixed(2)}ms`,
    result
  });
  
  return result;
};
